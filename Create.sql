--
-- Target: PostgreSQL 
-- Syntax: psql \i filename
-- 
-- Date  : May 24 2024 15:01
-- Script Generated by Database Design Studio 2.21.3 
--
-- Create Table    : 'Employee'   
-- EmpID           :  
-- name            :  
-- start_date      :  
-- birthdate       :  
-- department      : dept/team 
--
CREATE SEQUENCE seq_Employee_EmpID
    INCREMENT 1
    START 1;

CREATE TABLE Employee (
    EmpID          INTEGER DEFAULT NEXTVAL('seq_Employee_EmpID') NOT NULL,
    name           VARCHAR NOT NULL,
    start_date     DATE NOT NULL,
    birthdate      DATE NOT NULL,
    department     DEPT/TEAM('Library', 'Desk', 'Archives', 'Management', 'Security') NOT NULL,
CONSTRAINT pk_Employee PRIMARY KEY (EmpID));


--
-- Create Table    : 'Shift'   
-- EmpID           :  (references Employee.EmpID)
-- day_of_week     : days of week 
-- timeslot        :  
--
CREATE TABLE Shift (
    EmpID          INTEGER NOT NULL,
    day_of_week    DAYS('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday') NOT NULL,
    timeslot       INTERVAL NOT NULL,
CONSTRAINT pk_Shift PRIMARY KEY (EmpID),
CONSTRAINT fk_Shift FOREIGN KEY (EmpID)
    REFERENCES Employee (EmpID)
    MATCH FULL
    ON DELETE CASCADE
    ON UPDATE CASCADE);


--
-- Create Table    : 'Librarian'   
-- EmpID           :  (references Employee.EmpID)
-- specialty       : genres 
--
CREATE TABLE Librarian (
    EmpID          INTEGER NOT NULL,
    specialty      GENRE('children', 'mystery', 'fantasy', 'romance', 'science fiction', 'thriller', 'historical fiction', 'biography', 'self-help', 'cookbook') NOT NULL,
CONSTRAINT pk_Librarian PRIMARY KEY (EmpID),
CONSTRAINT fk_Librarian FOREIGN KEY (EmpID)
    REFERENCES Employee (EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Preserver'   
-- EmpID           :  (references Employee.EmpID)
-- specialty       : genres 
--
CREATE TABLE Preserver (
    EmpID          INTEGER NOT NULL,
    specialty      GENRE('children', 'mystery', 'fantasy', 'romance', 'science fiction', 'thriller', 'historical fiction', 'biography') NOT NULL,
CONSTRAINT pk_Preserver PRIMARY KEY (EmpID),
CONSTRAINT fk_Preserver FOREIGN KEY (EmpID)
    REFERENCES Employee (EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Secratary'   
-- EmpID           :  (references Employee.EmpID)
--
CREATE TABLE Secratary (
    EmpID          INTEGER NOT NULL,
CONSTRAINT pk_Secratary PRIMARY KEY (EmpID),
CONSTRAINT fk_Secratary FOREIGN KEY (EmpID)
    REFERENCES Employee (EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Manager'   
-- EmpID           :  (references Employee.EmpID)
-- team            : dept/team 
--
CREATE TABLE Manager (
    EmpID          INTEGER NOT NULL,
    team           DEPT/TEAM('Library', 'Desk', 'Archives', 'Security') NOT NULL,
CONSTRAINT pk_Manager PRIMARY KEY (EmpID),
CONSTRAINT fk_Manager FOREIGN KEY (EmpID)
    REFERENCES Employee (EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Security'   
-- EmpID           :  (references Employee.EmpID)
-- location        : guard posts 
--
CREATE TABLE Security (
    EmpID          INTEGER NOT NULL,
    location       POSTS('Front door', 'Back door', 'Side door', 'Main floor', 'Archives') NOT NULL,
CONSTRAINT pk_Security PRIMARY KEY (EmpID),
CONSTRAINT fk_Security FOREIGN KEY (EmpID)
    REFERENCES Employee (EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Permissions for: 'public'
--
GRANT ALL ON Employee TO GROUP public;
GRANT ALL ON Shift TO GROUP public;
GRANT ALL ON Librarian TO GROUP public;
GRANT ALL ON Preserver TO GROUP public;
GRANT ALL ON Secratary TO GROUP public;
GRANT ALL ON Manager TO GROUP public;
GRANT ALL ON Security TO GROUP public;

