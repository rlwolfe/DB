--
-- Target: PostgreSQL 
-- Syntax: psql \i filename
-- 
-- Date  : Aug 01 2024 17:52
-- Script Generated by Database Design Studio 2.21.3 
--

CREATE SEQUENCE if NOT EXISTS seq_Employee_EmpID
    INCREMENT 1
    START 1;

CREATE TYPE dept AS ENUM ('Library', 'Desk', 'Archives', 'Management', 'Security');

CREATE TYPE team AS ENUM ('Library', 'Desk', 'Archives', 'Security');

CREATE TYPE days AS ENUM ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday');

CREATE TYPE genre AS ENUM ('children', 'mystery', 'fantasy', 'romance', 'science fiction', 'thriller', 'historical fiction', 'biography', 'self-help', 'cookbook');

CREATE TYPE specialty AS ENUM ('children', 'mystery', 'fantasy', 'romance', 'science fiction', 'thriller', 'historical fiction', 'biography');

CREATE TYPE post AS ENUM ('Front door', 'Back door', 'Side door', 'Main floor', 'Archives');



--
-- Create Table    : 'Shift'   
-- day_of_week     :  
-- timeslot        :  
--
CREATE TABLE if NOT EXISTS "Shift" (
    day_of_week    days NOT NULL,
    timeslot       INTERVAL NOT NULL,
CONSTRAINT pk_Shift PRIMARY KEY (day_of_week,timeslot));


--
-- Create Table    : 'Wages'   
-- ID              :  
-- wage            :  
-- JOB_ID          :  
--
CREATE SEQUENCE if NOT EXISTS seq_Wages_ID
    INCREMENT 1
    START 1;

CREATE TABLE if NOT EXISTS "Wages" (
    ID             INTEGER DEFAULT NEXTVAL('seq_Wages_ID') NOT NULL,
    wage           INTEGER NOT NULL,
    JOB_ID         INTEGER NOT NULL,
CONSTRAINT pk_Wages PRIMARY KEY (ID));


--
-- Create Table    : 'People'   
-- Person_ID       :  
--
CREATE SEQUENCE if NOT EXISTS seq_People_Person_ID
    INCREMENT 1
    START 1;

CREATE TABLE if NOT EXISTS "People" (
    Person_ID      INTEGER DEFAULT NEXTVAL('seq_People_Person_ID') NOT NULL,
CONSTRAINT pk_People PRIMARY KEY (Person_ID));


--
-- Create Table    : 'Employee'   
-- Person_ID       :  (references People.Person_ID)
-- EmpID           :  
-- name            :  
-- start_date      :  
-- birthdate       :  
-- department      : dept/team 
--
CREATE SEQUENCE if NOT EXISTS seq_Employee_EmpID
    INCREMENT 1
    START 1;

CREATE TABLE if NOT EXISTS "Employee" (
    Person_ID      INTEGER NOT NULL,
    EmpID          INTEGER DEFAULT NEXTVAL('seq_Employee_EmpID') NOT NULL,
    name           VARCHAR NOT NULL,
    start_date     DATE NOT NULL,
    birthdate      DATE NOT NULL,
    department     dept NOT NULL,
CONSTRAINT pk_Employee PRIMARY KEY (Person_ID,EmpID),
CONSTRAINT fk_Employee FOREIGN KEY (Person_ID)
    REFERENCES "People" (Person_ID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Librarian'   
-- EmpID           :  (references Employee.EmpID)
-- Person_ID       :  (references Employee.Person_ID)
-- specialty       : genres 
--
CREATE TABLE if NOT EXISTS "Librarian" (
    EmpID          INTEGER NOT NULL,
    Person_ID      INTEGER NOT NULL,
    specialty      genre NOT NULL,
CONSTRAINT pk_Librarian PRIMARY KEY (EmpID,Person_ID),
CONSTRAINT fk_Librarian FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Preserver'   
-- EmpID           :  (references Employee.EmpID)
-- Person_ID       :  (references Employee.Person_ID)
-- specialty       : genres 
--
CREATE TABLE if NOT EXISTS "Preserver" (
    EmpID          INTEGER NOT NULL,
    Person_ID      INTEGER NOT NULL,
    specialty      genre NOT NULL,
CONSTRAINT pk_Preserver PRIMARY KEY (EmpID,Person_ID),
CONSTRAINT fk_Preserver FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Secratary'   
-- EmpID           :  (references Employee.EmpID)
-- Person_ID       :  (references Employee.Person_ID)
--
CREATE TABLE if NOT EXISTS "Secratary" (
    EmpID          INTEGER NOT NULL,
    Person_ID      INTEGER NOT NULL,
CONSTRAINT pk_Secratary PRIMARY KEY (EmpID,Person_ID),
CONSTRAINT fk_Secratary FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Manager'   
-- EmpID           :  (references Employee.EmpID)
-- Person_ID       :  (references Employee.Person_ID)
-- team            : dept/team 
--
CREATE TABLE if NOT EXISTS "Manager" (
    EmpID          INTEGER NOT NULL,
    Person_ID      INTEGER NOT NULL,
    team           team NOT NULL,
CONSTRAINT pk_Manager PRIMARY KEY (EmpID,Person_ID),
CONSTRAINT fk_Manager FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Security'   
-- EmpID           :  (references Employee.EmpID)
-- Person_ID       :  (references Employee.Person_ID)
-- location        : guard posts 
--
CREATE TABLE if NOT EXISTS "Security" (
    EmpID          INTEGER NOT NULL,
    Person_ID      INTEGER NOT NULL,
    location       post NOT NULL,
CONSTRAINT pk_Security PRIMARY KEY (EmpID,Person_ID),
CONSTRAINT fk_Security FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Works'   
-- EmpID           :  (references Employee.EmpID)
-- day_of_week     :  (references Shift.day_of_week)
-- timeslot        :  (references Shift.timeslot)
-- Person_ID       :  (references Employee.Person_ID)
--
CREATE TABLE if NOT EXISTS "Works" (
    EmpID          INTEGER NOT NULL,
    day_of_week    days NOT NULL,
    timeslot       INTERVAL NOT NULL,
    Person_ID      INTEGER NOT NULL,
CONSTRAINT pk_Works PRIMARY KEY (EmpID,day_of_week,timeslot,Person_ID),
CONSTRAINT fk_Works FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
CONSTRAINT fk_Works2 FOREIGN KEY (day_of_week,timeslot)
    REFERENCES "Shift" (day_of_week,timeslot)
    MATCH FULL
    ON DELETE CASCADE
    ON UPDATE CASCADE);


--
-- Create Table    : 'Payment'   
-- Person_ID       :  (references Employee.Person_ID)
-- EmpID           :  (references Employee.EmpID)
-- ID              :  (references Wages.ID)
-- CashflowID      :  
-- payDate         :  
-- status          :  
--
CREATE SEQUENCE if NOT EXISTS seq_Payment_CashflowID
    INCREMENT 1
    START 1;

CREATE TABLE if NOT EXISTS "Payment" (
    Person_ID      INTEGER NOT NULL,
    EmpID          INTEGER NOT NULL,
    ID             INTEGER NOT NULL,
    CashflowID     INTEGER DEFAULT NEXTVAL('seq_Payment_CashflowID') NOT NULL,
    payDate        DATE NOT NULL,
    status         BOOL NOT NULL,
CONSTRAINT pk_Payment PRIMARY KEY (Person_ID,EmpID,ID,CashflowID),
CONSTRAINT fk_Payment FOREIGN KEY (Person_ID,EmpID)
    REFERENCES "Employee" (Person_ID,EmpID)
    MATCH FULL
    ON DELETE CASCADE
    ON UPDATE CASCADE,
CONSTRAINT fk_Payment2 FOREIGN KEY (ID)
    REFERENCES "Wages" (ID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Create Table    : 'Members'   
-- Person_ID       :  (references People.Person_ID)
-- ID              :  
--
CREATE SEQUENCE if NOT EXISTS seq_Members_ID
    INCREMENT 1
    START 1;

CREATE TABLE if NOT EXISTS "Members" (
    Person_ID      INTEGER NOT NULL,
    ID             INTEGER DEFAULT NEXTVAL('seq_Members_ID') NOT NULL,
CONSTRAINT pk_Members PRIMARY KEY (Person_ID,ID),
CONSTRAINT fk_Members FOREIGN KEY (Person_ID)
    REFERENCES "People" (Person_ID)
    MATCH FULL
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


--
-- Permissions for: 'public'
--
GRANT ALL ON "Shift" TO GROUP public;
GRANT ALL ON "Wages" TO GROUP public;
GRANT ALL ON "People" TO GROUP public;
GRANT ALL ON "Employee" TO GROUP public;
GRANT ALL ON "Librarian" TO GROUP public;
GRANT ALL ON "Preserver" TO GROUP public;
GRANT ALL ON "Secratary" TO GROUP public;
GRANT ALL ON "Manager" TO GROUP public;
GRANT ALL ON "Security" TO GROUP public;
GRANT ALL ON "Works" TO GROUP public;
GRANT ALL ON "Payment" TO GROUP public;
GRANT ALL ON "Members" TO GROUP public;

